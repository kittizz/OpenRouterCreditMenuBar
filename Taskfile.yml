version: '3'

vars:
    APP_NAME: OpenRouterCreditMenuBar
    BUNDLE_ID: com.kttizz.OpenRouterCreditMenuBar
    VERSION: v1.0.0
    BUILD_DIR: ~/Library/Developer/Xcode/DerivedData
    SCHEME: '{{.APP_NAME}}'
tasks:
    build:
        desc: Build Release version
        cmds:
            - xcodebuild -scheme {{.SCHEME}} -configuration Release -derivedDataPath ./build clean build

    export-app:
        desc: Export Application from build
        deps: [build]
        vars:
            BUILD_PATH: './build/Build/Products/Release/{{.APP_NAME}}.app'
            OUTPUT_DIR: './release'
        cmds:
            - mkdir -p {{.OUTPUT_DIR}}
            - cp -R {{.BUILD_PATH}} {{.OUTPUT_DIR}}/
            - echo "Exported {{.APP_NAME}}.app to {{.OUTPUT_DIR}}/"
        generates:
            - ./release/{{.APP_NAME}}.app

    create-dmg:
        desc: Create DMG distribution package
        deps: [export-app]
        vars:
            DMG_NAME: '{{.APP_NAME}}_{{.VERSION}}.dmg'
        cmds:
            - rm -f ./release/{{.DMG_NAME}}
            - hdiutil create -volname "{{.APP_NAME}}" -srcfolder "./release/{{.APP_NAME}}.app" -ov -format UDZO "./release/{{.DMG_NAME}}"
            - echo "Created DMG{{":"}} ./release/{{.DMG_NAME}}"
        generates:
            - ./release/{{.APP_NAME}}_{{.VERSION}}.dmg

    create-zip:
        desc: Create ZIP distribution package
        deps: [export-app]
        vars:
            ZIP_NAME: '{{.APP_NAME}}_{{.VERSION}}.zip'
        cmds:
            - cd ./release && zip -r {{.ZIP_NAME}} {{.APP_NAME}}.app
            - echo "Created ZIP{{":"}} ./release/{{.ZIP_NAME}}"
        generates:
            - ./release/{{.APP_NAME}}_{{.VERSION}}.zip

    package:
        desc: Create both DMG and ZIP packages
        deps: [create-dmg, create-zip]

    github-release:
        desc: Create GitHub release and upload assets
        deps: [package]
        vars:
            REPO: '{{.GITHUB_REPOSITORY | default "username/repo"}}'
        cmds:
            - |
                gh release create {{.VERSION}} \
                  --title "{{.APP_NAME}} {{.VERSION}}" \
                  --notes "Release {{.VERSION}}" \
                  --repo {{.REPO}}
            - |
                gh release upload {{.VERSION}} \
                  ./release/{{.APP_NAME}}_{{.VERSION}}.dmg \
                  ./release/{{.APP_NAME}}_{{.VERSION}}.zip \
                  --repo {{.REPO}}
            - echo "Released {{.VERSION}} to GitHub!"

    release:
        desc: Full release pipeline
        cmds:
            - task: clean
            - task: github-release

    clean:
        desc: Clean build artifacts
        cmds:
            - rm -rf ./build
            - rm -rf ./release
            - echo "Cleaned build artifacts"

    check-deps:
        desc: Check required dependencies
        cmds:
            - |
                if ! command -v gh &> /dev/null; then
                  echo "GitHub CLI not found. Install{{":"}} brew install gh"
                  exit 1
                fi
            - |
                if ! gh auth status &> /dev/null; then
                  echo "Not authenticated with GitHub. Run{{":"}} gh auth login"
                  exit 1
                fi
            - echo "All dependencies satisfied"
